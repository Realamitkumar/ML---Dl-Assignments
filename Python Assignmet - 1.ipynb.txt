{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "301c5170",
   "metadata": {},
   "source": [
    "# Q1\n",
    "``Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5, between 2000 and 3200 (both included).\n",
    "The numbers obtained should be printed in a comma-separated sequence on a single line.``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "c3e1b843",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2002,2009,2016,2023,2037,2044,2051,2058,2072,2079,2086,2093,2107,2114,2121,2128,2142,2149,2156,2163,2177,2184,2191,2198,2212,2219,2226,2233,2247,2254,2261,2268,2282,2289,2296,2303,2317,2324,2331,2338,2352,2359,2366,2373,2387,2394,2401,2408,2422,2429,2436,2443,2457,2464,2471,2478,2492,2499,2506,2513,2527,2534,2541,2548,2562,2569,2576,2583,2597,2604,2611,2618,2632,2639,2646,2653,2667,2674,2681,2688,2702,2709,2716,2723,2737,2744,2751,2758,2772,2779,2786,2793,2807,2814,2821,2828,2842,2849,2856,2863,2877,2884,2891,2898,2912,2919,2926,2933,2947,2954,2961,2968,2982,2989,2996,3003,3017,3024,3031,3038,3052,3059,3066,3073,3087,3094,3101,3108,3122,3129,3136,3143,3157,3164,3171,3178,3192,3199\n"
     ]
    }
   ],
   "source": [
    "c=[]\n",
    "for i in range(2000,3201):\n",
    "    if (i%7==0) and (i%5!=0):\n",
    "            c.append(str(i))\n",
    "print(\",\".join(c))            "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73ab0183",
   "metadata": {},
   "source": [
    "# Q2:\n",
    "``Write a Python program which accepts the \n",
    "user’s first and last name and print them in reverse order``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "53194a7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter First Name Here/nAmit\n",
      "Enter Last Name Here/nKumar\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'ramuK timA'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#1\n",
    "first = input(\"Enter First Name Here/n\")\n",
    "last = input(\"Enter Last Name Here/n\")\n",
    "#2 Spacing \n",
    "r = first + \" \"+ last\n",
    "#3\n",
    "s=r[::-1]\n",
    "#Result\n",
    "s"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88ca0236",
   "metadata": {},
   "source": [
    "# Q3:\n",
    "``Write a Python program to \n",
    "find the volume of a sphere\n",
    "with diameter 12 cm \n",
    "Formula : V=4/3 * π * r 3``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "2ba29b85",
   "metadata": {},
   "outputs": [],
   "source": [
    "pi = 3.14\n",
    "r = 12\n",
    "V=4/3 * pi * (r*r*r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "8b098219",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7234.5599999999995"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "V"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5933f7a2",
   "metadata": {},
   "source": [
    "# Revision"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "289574bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "range(0, 10)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "range(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0c5db248",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(range(1,11))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "94fb34fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10, 9, 8, 7, 6, 5, 4]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(range(10,3,-1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "799e5abe",
   "metadata": {},
   "outputs": [],
   "source": [
    "l=[1, 2, 3, 4, 5, 6]\n",
    "\n",
    "#l[::-1] #if want to reverse\n",
    "\n",
    "m = []\n",
    "\n",
    "for i in l:\n",
    "    i+=2\n",
    "    m.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "2442e502",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3, 4, 5, 6, 7, 8]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "17d79048",
   "metadata": {},
   "outputs": [],
   "source": [
    "#range() with For Loop\n",
    "\n",
    "l=[5, 2, 3, 4, 5, 6]\n",
    "m = []\n",
    "\n",
    "for i in range(len(l)):\n",
    "    n=l[i]\n",
    "    m.append(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "043fc6a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[5, 2, 3, 4, 5, 6]"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "521b1fc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#if condition\n",
    "\n",
    "l=[5, 2, 3, 4, 5, 6]\n",
    "m = []\n",
    "\n",
    "for i in range(len(l)):\n",
    "    if i >= 4: \n",
    "        m.append(l[i]+2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "a3e85a7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[7, 8]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "0cf7d7ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "l=[5, 2, 3, 4, 5, 6,\"sudh\"]\n",
    "m=[]\n",
    "\n",
    "for i in l:\n",
    "    if type(i)==str: \n",
    "        m.append(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86a38676",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "a481ff19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['sudh']"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "e8753c92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "55\n"
     ]
    }
   ],
   "source": [
    "#WHile loop\n",
    "d=10\n",
    "s=0\n",
    "i=1\n",
    "while i<=d:\n",
    "    s = s + i\n",
    "    i = i + 1\n",
    "print(s)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "565df33c",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-94-c30302bd4b53>, line 6)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-94-c30302bd4b53>\"\u001b[1;36m, line \u001b[1;32m6\u001b[0m\n\u001b[1;33m    else:\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "#for-else Condition\n",
    "for x in \"sudh\":\n",
    "    if x == \"d\":\n",
    "        break # stop at that moment\n",
    "    print(x)\n",
    "    else:\n",
    "        print(\"oops\")\n",
    "#else:\n",
    "    print(\"I am unable to complete iteration\") \n",
    "print(\"out of the loop\")    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "e024416f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "s\n",
      "u\n",
      "h\n"
     ]
    }
   ],
   "source": [
    "for x in \"sudh\":\n",
    "    if x == \"d\":\n",
    "        continue #skip & contnue with others\n",
    "    print(x)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "942c31b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Insert integer only 7\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[7, 7]"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Input Operation\n",
    "a = int(input(\"Insert integer only \"))\n",
    "l = [1,2,3,4,5,6,7,5,5,5,6,7,8,9,9]\n",
    "m = []\n",
    "\n",
    "for i in l :\n",
    "    if i == a:\n",
    "        m.append(i)    \n",
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "4928cbf0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'sudh1'"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"sudh\" + str(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "eeba8f01",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "can only concatenate list (not \"str\") to list",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-165-35235c54451b>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m+\u001b[0m\u001b[1;34m\"sudh\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m: can only concatenate list (not \"str\") to list"
     ]
    }
   ],
   "source": [
    "[1,2,3]+\"sudh\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "3ac81007",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1,2,3sudh'"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "str(\"1,2,3\") +\"sudh\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "64f4fabe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 'sudh']"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[1,2,3]+[\"sudh\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "241c3fd2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
